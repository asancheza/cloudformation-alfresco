{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "(0019) Alfresco One on AWS main template ** Version 2.0 ** This template will create a new VPC, and deploy an Alfresco cluster behind an ELB in 2 availabiltiy zones, the cluster will be configured to use an S3 bucket for storage and an multi-AZ MySQL RDS instance will be used as the database. **This version only supports all AWS regions except GovCloud**",
    "Parameters": {
        "KeyName": {
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Description": "Name of an existing EC2 KeyPair, all instances will launch with this KeyPair"
        },
        "OperatorEMail": {
            "Description": "EMail address to notify if there are any scaling operations",
            "Type": "String",
            "AllowedPattern": "([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)",
            "ConstraintDescription": "Must be a valid email address."
        },
        "SSHFrom": {
            "Description": "Lockdown SSH access to the bastion host (default can be accessed from anywhere)",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "Must be a valid CIDR range of the form x.x.x.x/x."
        },
        "AZ1": {
            "Type": "AWS::EC2::AvailabilityZone::Name",
            "Description": "First availabiltiy zone to deploy into.",
            "ConstraintDescription": "Must be a valid EC2 Availabilty zone"
        },
        "AZ2": {
            "Type": "AWS::EC2::AvailabilityZone::Name",
            "Description": "Second availabiltiy zone to deploy into (must be the same Region as for AZ1)",
            "ConstraintDescription": "Must be a valid EC2 Availabilty zone"
        },
        "AlfrescoInstanceType": {
            "Default": "m4.xlarge",
            "Description": "Type of EC2 instance for the Alfresco instances (Share + Repository)",
            "Type": "String",
            "AllowedValues": [
                "t2.medium",
                "t2.large",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "r3.large",
                "r3.xlarge"
            ],
            "ConstraintDescription": "Must contain valid instance type"
        },
        "IndexInstanceType": {
            "Default": "m4.xlarge",
            "Description": "Type of EC2 instance for the Alfresco Index instances (Solr)",
            "Type": "String",
            "AllowedValues": [
                "t2.medium",
                "t2.large",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "r3.large",
                "r3.xlarge"
            ],
            "ConstraintDescription": "Must contain valid instance type"
        },
        "NATInstanceType": {
            "Default": "t2.small",
            "Description": "Type of EC2 instance for the NAT instances",
            "Type": "String",
            "AllowedValues": [
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large"
            ],
            "ConstraintDescription": "Must contain valid instance type"
        },
        "RDSInstanceType": {
            "Default": "db.t2.small",
            "Description": "Type of EC2 instance for the MySQL DB instances",
            "Type": "String",
            "AllowedValues": [
                "db.t2.medium",
                "db.t2.large",
                "db.m3.medium",
                "db.m3.large",
                "db.m3.xlarge",
                "db.m3.2xlarge",
                "db.r3.large",
                "db.r3.xlarge",
                "db.r3.2xlarge",
                "db.r3.4xlarge",
                "db.r3.8xlarge",
                "db.t2.micro",
                "db.t2.small",
                "db.t2.medium",
                "db.t2.large",
                "db.m4.medium",
                "db.m4.large",
                "db.m4.xlarge"
            ],
            "ConstraintDescription": "Must contain valid RDS instance type"
        },
        "RDSDBName": {
            "Default": "alfresco",
            "Type": "String",
            "Description": "DB Name for the RDS MySQL database"
        },
        "RDSUsername": {
            "Default": "alfresco",
            "Type": "String",
            "Description": "Username for the RDS MySQL database"
        },
        "RDSPassword": {
            "Default": "alfresco",
            "Type": "String",
            "Description": "Password for the RDS MySQL database, by default: alfresco",
            "NoEcho": "TRUE"
        },
        "S3BucketName": {
            "Type": "String",
            "Default": "your-company-unique-name-alf-12345",
            "Description": "Name of the S3 bucket that Alfresco should use to store data. Note: This bucket will be created, enter a unique name, do not use contain uppercase characters."
        },
        "AlfrescoPassword": {
            "Type": "String",
            "Description": "Password for the Alfresco admin user. Introduce your desired password.",
            "Default": "",
            "NoEcho": "TRUE"
        },
        "AlfrescoTrialLicense": {
            "Type": "String",
            "Description": "URL of your Alfresco trial license *with clustering enabled*. If you don't have one, please ask for it to your Sales representative or to Alfresco Support via http://support.alfresco.com",
            "Default": "type a public URL here, i.e. a S3 url with your license"
        },
        "ArtifactRepoUsername": {
            "Type": "String",
            "Default": "maven-enterprise-trial",
            "Description": "Username for the Alfresco artifact repository. Leave this value by default."
        },
        "ArtifactRepoPassword": {
            "Type": "String",
            "Description": "Password for the Alfresco artifact repository user. Leave this value by default.",
            "Default": "trialuser",
            "NoEcho": "TRUE"
        }
    },
    "Mappings": {
        "ALINUXAMI": {
          "us-east-1": {
              "AMI": "ami-61bbf104"
          },
          "us-west-1": {
              "AMI": "ami-f77fbeb3"
          },
          "us-west-2": {
              "AMI": "ami-d440a6e7"
          },
          "eu-west-1": {
              "AMI": "ami-33734044"
          },
          "eu-central-1": {
              "AMI": "ami-e68f82fb"
          },
          "ap-southeast-1": {
              "AMI": "ami-2a7b6b78"
          },
          "ap-southeast-2": {
              "AMI": "ami-d38dc6e9"
          },
          "ap-northeast-1": {
              "AMI": "ami-b80b6db8"
          },
          "ap-northeast-2": {
              "AMI": "ami-dd9d53b3"
          },
          "sa-east-1": {
              "AMI": "ami-fd0197e0"
          }
        },
        "AWSNATAMI": {
            "us-east-1": {
                "AMI": "ami-4c9e4b24"
            },
            "us-west-1": {
                "AMI": "ami-2b2b296e"
            },
            "us-west-2": {
                "AMI": "ami-bb69128b"
            },
            "eu-west-1": {
                "AMI": "ami-3760b040"
            },
            "eu-central-1": {
                "AMI": "ami-204c7a3d"
            },
            "ap-southeast-1": {
                "AMI": "ami-b082dae2"
            },
            "ap-southeast-2": {
                "AMI": "ami-996402a3"
            },
            "ap-northeast-1": {
                "AMI": "ami-55c29e54"
            },
            "sa-east-1": {
                "AMI": "ami-b972dba4"
            }
        },
        "SubnetConfig": {
            "VPC": {
                "CIDR": "10.0.0.0/16"
            },
            "NAT1": {
                "CIDR": "10.0.1.0/24"
            },
            "NAT2": {
                "CIDR": "10.0.2.0/24"
            },
            "Alfresco1": {
                "CIDR": "10.0.10.0/27"
            },
            "Alfresco2": {
                "CIDR": "10.0.20.0/27"
            },
            "RDS1": {
                "CIDR": "10.0.100.0/24"
            },
            "RDS2": {
                "CIDR": "10.0.200.0/24"
            }
        }
    },
    "Resources": {
        "NotificationTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "Subscription": [
                    {
                        "Endpoint": {
                            "Ref": "OperatorEMail"
                        },
                        "Protocol": "email"
                    }
                ]
            }
        },
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "VPC",
                        "CIDR"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": "Alfresco Cluster behind ELB with S3 for shared storage and RDS (MySQL) for database"
                    }
                ]
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway"
        },
        "AttachGateway": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "AlfrescoSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "Alfresco1",
                        "CIDR"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": "Alfresco"
                    },
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ],
                "AvailabilityZone": {
                    "Ref": "AZ1"
                }
            }
        },
        "AlfrescoSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "Alfresco2",
                        "CIDR"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": "Alfresco"
                    },
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ],
                "AvailabilityZone": {
                    "Ref": "AZ2"
                }
            }
        },
        "NATSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "NAT1",
                        "CIDR"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": "NAT"
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ],
                "AvailabilityZone": {
                    "Ref": "AZ1"
                }
            }
        },
        "NATSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "NAT2",
                        "CIDR"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": "NAT"
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ],
                "AvailabilityZone": {
                    "Ref": "AZ2"
                }
            }
        },
        "RecoveryNAT1Alarm": {
          "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
              "AlarmDescription": "Trigger a recovery when instance NAT1 status check fails for 15 consecutive minutes.",
              "Namespace": "AWS/EC2" ,
              "MetricName": "StatusCheckFailed_System",
              "Statistic": "Minimum",
              "Period": "60",
              "EvaluationPeriods": "15",
              "ComparisonOperator": "GreaterThanThreshold",
              "Threshold": "0",
              "AlarmActions": [
                {
                  "Fn::Join" : ["", ["arn:aws:automate:", { "Ref" : "AWS::Region" }, ":ec2:recover" ]]
                }
                ],
              "Dimensions": [
                {
                  "Name": "InstanceId","Value": {
                    "Ref": "NATInstance1"
                  }
                  }
                ]
            }
          },
        "RecoveryNAT2Alarm": {
          "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
              "AlarmDescription": "Trigger a recovery when instance NAT1 status check fails for 15 consecutive minutes.",
              "Namespace": "AWS/EC2" ,
              "MetricName": "StatusCheckFailed_System",
              "Statistic": "Minimum",
              "Period": "60",
              "EvaluationPeriods": "15",
              "ComparisonOperator": "GreaterThanThreshold",
              "Threshold": "0",
              "AlarmActions": [
                {
                  "Fn::Join" : ["", ["arn:aws:automate:", { "Ref" : "AWS::Region" }, ":ec2:recover" ]]
                }
                ],
              "Dimensions": [
                {
                  "Name": "InstanceId","Value": {
                    "Ref": "NATInstance2"
                  }
                  }
                ]
              }
            },
        "NATEIP1": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc"
            }
        },
        "NATEIP2": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc"
            }
        },
        "NATSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable internal access to the NAT device",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp", "FromPort": "22", "ToPort": "22",
                        "CidrIp": { "Ref": "SSHFrom" }
                    },
                    {
                        "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80",
                        "CidrIp": "10.0.0.0/16"
                    },
                    {
                        "IpProtocol": "tcp", "FromPort": "443", "ToPort": "443",
                        "CidrIp": "10.0.0.0/16"
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp", "FromPort": "443", "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",  "FromPort": "22",  "ToPort": "22",
                        "CidrIp": {
                            "Fn::FindInMap": [ "SubnetConfig", "Alfresco2", "CIDR" ]
                        }
                    },
                    {
                        "IpProtocol": "tcp", "FromPort": "22", "ToPort": "22",
                        "CidrIp": {
                            "Fn::FindInMap": [ "SubnetConfig", "Alfresco1", "CIDR" ]
                        }
                    }
                ]
            }
        },
        "NATInterface1": {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "SubnetId": {
                    "Ref": "NATSubnet1"
                },
                "Description": "External interface for the NAT instance in AZ1",
                "GroupSet": [
                    {
                        "Ref": "NATSecurityGroup"
                    }
                ],
                "SourceDestCheck": "false",
                "Tags": [
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ]
            }
        },
        "NATInterface2": {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "SubnetId": {
                    "Ref": "NATSubnet2"
                },
                "Description": "External interface for the NAT instance in AZ1",
                "GroupSet": [
                    {
                        "Ref": "NATSecurityGroup"
                    }
                ],
                "SourceDestCheck": "false",
                "Tags": [
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ]
            }
        },
        "AssociateInterfaceNAT1": {
            "Type": "AWS::EC2::EIPAssociation",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "NATEIP1",
                        "AllocationId"
                    ]
                },
                "NetworkInterfaceId": {
                    "Ref": "NATInterface1"
                }
            }
        },
        "AssociateInterfaceNAT2": {
            "Type": "AWS::EC2::EIPAssociation",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "NATEIP2",
                        "AllocationId"
                    ]
                },
                "NetworkInterfaceId": {
                    "Ref": "NATInterface2"
                }
            }
        },
        "NATInstance1": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "NAT Instance 1"
                    }
                ],
                "InstanceType": {
                    "Ref": "NATInstanceType"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "NetworkInterfaces": [
                    {
                        "NetworkInterfaceId": {
                            "Ref": "NATInterface1"
                        },
                        "DeviceIndex": "0"
                    }
                ],
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSNATAMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMI"
                    ]
                }
            }
        },
        "NATInstance2": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "NAT Instance 2"
                    }
                ],
                "InstanceType": {
                    "Ref": "NATInstanceType"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "NetworkInterfaces": [
                    {
                        "NetworkInterfaceId": {
                            "Ref": "NATInterface2"
                        },
                        "DeviceIndex": "0"
                    }
                ],
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSNATAMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMI"
                    ]
                }
            }
        },
        "ELBSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow access to the ELB",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp", "FromPort": "443", "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    }

                ],
                "SecurityGroupEgress": [
                  {
                    "IpProtocol": "tcp", "FromPort": "0", "ToPort": "65535",
                    "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "ElasticLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "Subnets": [
                    { "Ref": "NATSubnet1" },
                    { "Ref": "NATSubnet2" }
                ],
                "SecurityGroups": [
                    {
                        "Ref": "ELBSecurityGroup"
                    }
                ],
                "AppCookieStickinessPolicy": [
                    {
                        "CookieName": "jsessionid",
                        "PolicyName": "AlfrescoSetup"
                    }
                ],
                "Listeners": [
                    {
                        "LoadBalancerPort": "80",
                        "InstancePort": "80",
                        "Protocol": "HTTP",
                        "PolicyNames": [
                            "AlfrescoSetup"
                        ]
                    }
                ],
                "CrossZone": "true",
                "HealthCheck": {
                    "Target": "TCP:80",
                    "HealthyThreshold": "2",
                    "UnhealthyThreshold": "3",
                    "Interval": "30",
                    "Timeout": "3"
                }
            }
        },
        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": "ELB and NAT Instance"
                    }
                ]
            }
        },
        "PublicRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "AlfrescoRouteTable1": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": "Alfresco"
                    }
                ]
            }
        },
        "AlfrescoRoute1": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "AlfrescoRouteTable1"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "InstanceId": {
                    "Ref": "NATInstance1"
                }
            }
        },
        "AlfrescoRouteTable2": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": "Alfresco"
                    }
                ]
            }
        },
        "AlfrescoRoute2": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "AlfrescoRouteTable2"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "InstanceId": {
                    "Ref": "NATInstance2"
                }
            }
        },
        "AlfrescoSubnetRouteTableAssociation1": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": { "Ref": "AlfrescoSubnet1" },
                "RouteTableId": { "Ref": "AlfrescoRouteTable1" }
            }
        },
        "AlfrescoSubnetRouteTableAssociation2": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": { "Ref": "AlfrescoSubnet2" },
                "RouteTableId": { "Ref": "AlfrescoRouteTable2" }
            }
        },
        "PublicSubnetRouteTableAssociation1": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": { "Ref": "NATSubnet1" },
                "RouteTableId": { "Ref": "PublicRouteTable" }
            }
        },
        "PublicSubnetRouteTableAssociation2": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": { "Ref": "NATSubnet2" },
                "RouteTableId": { "Ref": "PublicRouteTable" }
            }
        },
        "SetupRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "AlfrescoSetup",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "cloudformation:DescribeStackResource",
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "elasticloadbalancing:*",
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "autoscaling:*"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                      "ec2:*"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloudwatch:PutMetricData",
                                        "cloudwatch:EnableAlarmActions",
                                        "cloudwatch:PutMetricAlarm"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Resource": "*",
                                      "Action": [
                                          "s3:List*"
                                      ],
                                      "Effect": "Allow"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:*"
                                    ],
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:s3:::",
                                                {
                                                    "Ref": "S3Bucket"
                                                },
                                                "/*"
                                            ]
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "SetupRoleProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "SetupRole"
                    }
                ]
            }
        },
        "AlfrescoUser": {
            "Type": "AWS::IAM::User",
            "Properties": {
                "Policies": [
                    {
                        "PolicyName": "cfn-and-s3",
                        "PolicyDocument": {
                            "Statement": [
                              {
                                  "Effect": "Allow",
                                  "Action": "cloudformation:DescribeStackResource",
                                  "Resource": "*"
                              },
                              {
                                  "Effect": "Allow",
                                  "Action": "elasticloadbalancing:*",
                                  "Resource": "*"
                              },
                              {
                                  "Effect": "Allow",
                                  "Action": [
                                      "autoscaling:*"
                                  ],
                                  "Resource": "*"
                              },
                              {
                                  "Effect": "Allow",
                                  "Action": [
                                    "ec2:*"
                                  ],
                                  "Resource": "*"
                              },
                              {
                                  "Effect": "Allow",
                                  "Action": [
                                      "cloudwatch:PutMetricData",
                                      "cloudwatch:EnableAlarmActions",
                                      "cloudwatch:PutMetricAlarm"
                                  ],
                                  "Resource": "*"
                              },
                              {
                                  "Resource": "*",
                                    "Action": [
                                        "s3:List*"
                                    ],
                                    "Effect": "Allow"
                              },
                              {
                                  "Effect": "Allow",
                                  "Action": [
                                      "s3:*"
                                  ],
                                  "Resource": {
                                      "Fn::Join": [
                                          "",
                                          [
                                              "arn:aws:s3:::",
                                              {
                                                  "Ref": "S3Bucket"
                                              },
                                              "/*"
                                          ]
                                      ]
                                  }
                              }
                            ]
                        }
                    }
                ]
            }
        },
        "CfnKeys": {
            "Type": "AWS::IAM::AccessKey",
            "Properties": {
                "UserName": {
                    "Ref": "AlfrescoUser"
                }
            }
        },
        "RDSDBSubnetGroup": {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties": {
                "DBSubnetGroupDescription": "Subnets available for the RDS DB Instance",
                "SubnetIds": [
                    {
                        "Ref": "RDSSubnet1"
                    },
                    {
                        "Ref": "RDSSubnet2"
                    }
                ]
            }
        },
        "RDSSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties" :
            {
              "GroupDescription" : "Security group for RDS DB Instance.",
              "VpcId" : { "Ref" : "VPC" },
              "SecurityGroupIngress": [
                {
                    "IpProtocol": "tcp",
                    "FromPort": "3306",
                    "ToPort": "3306",
                    "SourceSecurityGroupId": {
                        "Ref": "AlfrescoSecurityGroup"
                    }
                }
              ]
            }
        },
        "RDSDBInstance": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "MultiAZ": "true",
                "VPCSecurityGroups": [ { "Ref": "RDSSecurityGroup" } ],
                "AllocatedStorage": "5",
                "DBInstanceClass": { "Ref": "RDSInstanceType" },
                "Engine": "MySQL",
                "MasterUsername": { "Ref": "RDSUsername" },
                "MasterUserPassword": { "Ref": "RDSPassword" },
                "DBSubnetGroupName": { "Ref": "RDSDBSubnetGroup" },
                "DBName": { "Ref": "RDSDBName" }
            },
            "DeletionPolicy": "Snapshot"
        },
        "AlfrescoASLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                }
              }
            },
            "Properties": {
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "ALINUXAMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMI"
                    ]
                },
                "InstanceMonitoring":"true",
                "IamInstanceProfile": {
                    "Ref": "SetupRoleProfile"
                },
                "InstanceType": {
                    "Ref": "AlfrescoInstanceType"
                },
                "SecurityGroups":[
                   {
                      "Ref":"AlfrescoSecurityGroup"
                   }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -x\n",
                                "/usr/bin/yum check-update\n",
                                "/usr/bin/yum install -y libffi-devel openssl-devel python-pip\n",
                                "/usr/bin/pip install pyopenssl ndg-httpsclient pyasn1\n",
                                "/usr/bin/easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz || sleep 10\n",
                                "/usr/bin/cfn-init",
                                "    --stack ",
                                {
                                   "Ref":"AWS::StackName"
                                },
                                " -r AlfrescoASLaunchConfig",
                                "    --access-key ",
                                {
                                   "Ref":"CfnKeys"
                                },
                                "    --secret-key ",
                                {
                                   "Fn::GetAtt":[
                                      "CfnKeys",
                                      "SecretAccessKey"
                                   ]
                                },
                                "    --region     ",
                                {
                                   "Ref":"AWS::Region"
                                },
                                "\n",
                                "export NODE_NAME=share\n",
                                "mkdir /etc/chef\n",
                                "curl -L https://s3.amazonaws.com/quickstart-reference/alfresco-one/latest/scripts/${NODE_NAME}.json > /etc/chef/attributes.json\n",
                                "sed -i 's/@@ARTIFACT_REPO_USERNAME@@/",
                                {
                                    "Ref": "ArtifactRepoUsername"
                                },
                                "/g' /etc/chef/attributes.json\n",
                                "sed -i 's/@@ARTIFACT_REPO_PASSWORD@@/",
                                {
                                    "Ref": "ArtifactRepoPassword"
                                },
                                "/g' /etc/chef/attributes.json\n",
                                "sed -i 's/@@STACK_NAME@@/",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "/g' /etc/chef/attributes.json\n",
                                "sed -i 's/@@FQDN@@/",
                                {
                                    "Fn::GetAtt": [
                                        "ElasticLoadBalancer",
                                        "DNSName"
                                    ]
                                },
                                "/g' /etc/chef/attributes.json\n",
                                "sed -i 's/@@AWS_ACCESS_KEY@@/",
                                {
                                    "Ref": "CfnKeys"
                                },
                                "/g' /etc/chef/attributes.json\n",
                                "sed -i 's#@@AWS_SECRET_KEY@@#",
                                {
                                    "Fn::GetAtt": [
                                        "CfnKeys",
                                        "SecretAccessKey"
                                    ]
                                },
                                "#g' /etc/chef/attributes.json\n",
                                "sed -i 's/@@DB_HOST@@/",
                                {
                                    "Fn::GetAtt": [
                                        "RDSDBInstance",
                                        "Endpoint.Address"
                                    ]
                                },
                                "/g' /etc/chef/attributes.json\n",
                                "sed -i 's/@@DB_NAME@@/",
                                {
                                    "Ref": "RDSDBName"
                                },
                                "/g' /etc/chef/attributes.json\n",
                                "sed -i 's/@@DB_USERNAME@@/",
                                {
                                    "Ref": "RDSUsername"
                                },
                                "/g' /etc/chef/attributes.json\n",
                                "sed -i 's/@@DB_PASSWORD@@/",
                                {
                                    "Ref": "RDSPassword"
                                },
                                "/g' /etc/chef/attributes.json\n",
                                "sed -i 's/@@CONTENTSTORE_S3_BUCKET@@/",
                                {
                                    "Ref": "S3BucketName"
                                },
                                "/g' /etc/chef/attributes.json\n",
                                "sed -i 's/@@AWS_REGION@@/",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "/g' /etc/chef/attributes.json\n",
                                "yum -y install coreutils glibc-common openssl\n",
                                "ALFPASS=$(printf %s ",
                                {
                                    "Ref": "AlfrescoPassword"
                                },
                                " | iconv -t utf16le | openssl md4| awk '{ print $2}')\n",
                                "sed -i \"s/@@ALFRESCO_PASSWORD@@/$ALFPASS/g\" /etc/chef/attributes.json\n",
                                "sed -i 's/@@AWS_SG_NAME@@/AlfrescoSecurityGroup/g' /etc/chef/attributes.json\n",
                                "export CHEF_ALFRESCO_VERSION='0.6.22'\n",
                                "curl -L https://s3.amazonaws.com/quickstart-reference/alfresco-one/latest/scripts/install-alfresco.sh --no-sessionid | bash -s\n",
                                "export LOCALIP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)\n",
                                "export LOCALNAME=$(curl http://169.254.169.254/latest/meta-data/local-hostname)\n",
                                "export LOCALSHORTNAME=$(curl http://169.254.169.254/latest/meta-data/hostname|awk -F. '{print $1}')\n",
                                "echo $LOCALIP $LOCALSHORTNAME $LOCALNAME >> /etc/hosts\n",
                                "mkdir -p /usr/share/tomcat-alfresco/alflicense\n",
                                "curl -L ",{ "Ref": "AlfrescoTrialLicense" }," -o /usr/share/tomcat-alfresco/alflicense/license.lic\n",
                                "semanage port -a -t http_port_t -p tcp 2100\n",
                                "semanage permissive -a httpd_t\n",
                                "semanage permissive -a haproxy_t\n",
                                "mkdir /root/.aws/\n",
                                "echo [default] > /root/.aws/config\n",
                                "echo region = ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " >> /root/.aws/config\n",
                                "yum -y install wget libreoffice-headless.x86_64\n",
                                "cd /etc/chef; chef-client -z -j /etc/chef/attributes.json\n",
                                "export ALFSUBNET1=", { "Ref":"AlfrescoSubnet1" }, "\n",
                                "export ALFSUBNET2=", { "Ref":"AlfrescoSubnet2" }, "\n",
                                "export AUTOSCALING_GROUP_NAME=$(aws autoscaling describe-auto-scaling-groups | grep AutoScalingGroupName|grep AlfrescoAutoScalingGroup|awk -F\\\" '{ print $4 }')\n",
                                "aws autoscaling update-auto-scaling-group --auto-scaling-group-name $AUTOSCALING_GROUP_NAME --min-size 2 --max-size 4 --desired-capacity 2 --vpc-zone-identifier $ALFSUBNET1,$ALFSUBNET2\n"
                            ]
                        ]
                    }
                  }
                }
         },
        "AlfrescoScaleUpPolicy":{
               "Type":"AWS::AutoScaling::ScalingPolicy",
               "Properties":{
                  "AdjustmentType":"ChangeInCapacity",
                  "AutoScalingGroupName":{
                     "Ref":"AlfrescoAutoScalingGroup"
                  },
                  "Cooldown":"900",
                  "ScalingAdjustment":"1"
               }
            },
        "AlfrescoScaleDownPolicy":{
               "Type":"AWS::AutoScaling::ScalingPolicy",
               "Properties":{
                  "AdjustmentType":"ChangeInCapacity",
                  "AutoScalingGroupName":{
                     "Ref":"AlfrescoAutoScalingGroup"
                  },
                  "Cooldown":"900",
                  "ScalingAdjustment":"-1"
               }
            },
        "CPUAlarmHigh":{
               "Type":"AWS::CloudWatch::Alarm",
               "Properties":{
                  "AlarmDescription":"Scale-up if CPU > 60% for 5 minutes",
                  "MetricName":"CPUUtilization",
                  "Namespace":"AWS/EC2",
                  "Statistic":"Average",
                  "Period":"60",
                  "EvaluationPeriods":"5",
                  "Threshold":"60",
                  "AlarmActions":[
                     {
                        "Ref":"AlfrescoScaleUpPolicy"
                     }
                  ],
                  "Dimensions":[
                     {
                        "Name":"AutoScalingGroupName",
                        "Value":{
                           "Ref":"AlfrescoAutoScalingGroup"
                        }
                     }
                  ],
                  "ComparisonOperator":"GreaterThanThreshold"
               }
            },
        "CPUAlarmLow":{
               "Type":"AWS::CloudWatch::Alarm",
               "Properties":{
                  "AlarmDescription":"Scale-down if CPU < 40% for 30 minutes",
                  "MetricName":"CPUUtilization",
                  "Namespace":"AWS/EC2",
                  "Statistic":"Average",
                  "Period":"60",
                  "EvaluationPeriods":"30",
                  "Threshold":"40",
                  "AlarmActions":[
                     {
                        "Ref":"AlfrescoScaleDownPolicy"
                     }
                  ],
                  "Dimensions":[
                     {
                        "Name":"AutoScalingGroupName",
                        "Value":{
                           "Ref":"AlfrescoAutoScalingGroup"
                        }
                     }
                  ],
                  "ComparisonOperator":"LessThanThreshold"
               }
            },
        "AlfrescoAutoScalingGroup":{
               "Type":"AWS::AutoScaling::AutoScalingGroup",
               "Properties":{
                  "AvailabilityZones": [ { "Ref":"AZ2", "Ref":"AZ1" } ],
                  "VPCZoneIdentifier": [ { "Ref":"AlfrescoSubnet2", "Ref":"AlfrescoSubnet1" } ],
                  "Cooldown":"600",
                  "DesiredCapacity":"1",
                  "HealthCheckGracePeriod":"1500",
                  "HealthCheckType":"ELB",
                  "LaunchConfigurationName": { "Ref":"AlfrescoASLaunchConfig" },
                  "LoadBalancerNames":[ { "Ref":"ElasticLoadBalancer" } ],
                  "MaxSize":"4",
                  "MinSize":"1",
                  "NotificationConfiguration":{
                     "TopicARN":{
                        "Ref":"NotificationTopic"
                     },
                     "NotificationTypes":[
                        "autoscaling:EC2_INSTANCE_LAUNCH",
                        "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                        "autoscaling:EC2_INSTANCE_TERMINATE",
                        "autoscaling:EC2_INSTANCE_TERMINATE_ERROR",
                        "autoscaling:TEST_NOTIFICATION"
                     ]
                  },
                  "Tags":[
                     {
                        "Key":"Name",
                        "Value": "Alfresco Server cluster node",
                        "PropagateAtLaunch":"true"
                     }
                  ]
               }
            },
        "IndexASLaunchConfig": {
              "Type": "AWS::AutoScaling::LaunchConfiguration",
              "Metadata": {
                        "AWS::CloudFormation::Init": {
                            "config": {
                            }
                        }
                    },
              "Properties": {
                        "KeyName": {
                            "Ref": "KeyName"
                        },
                        "ImageId": {
                            "Fn::FindInMap": [
                                "ALINUXAMI",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "AMI"
                            ]
                        },
                        "InstanceMonitoring":"true",
                        "IamInstanceProfile": {
                            "Ref": "SetupRoleProfile"
                        },
                        "InstanceType": {
                            "Ref": "IndexInstanceType"
                        },
                        "SecurityGroups":[
                           {
                              "Ref":"AlfrescoSecurityGroup"
                           }
                        ],
                        "UserData": {
                            "Fn::Base64": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "#!/bin/bash -x\n",
                                        "/usr/bin/yum check-update\n",
                                        "/usr/bin/yum install -y libffi-devel openssl-devel python-pip mysql\n",
                                        "/usr/bin/pip install pyopenssl ndg-httpsclient pyasn1\n",
                                        "/usr/bin/easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz || sleep 10\n",
                                        "/usr/bin/cfn-init",
                                        "    --stack ",
                                        {
                                           "Ref":"AWS::StackName"
                                        },
                                        " -r IndexASLaunchConfig",
                                        "    --access-key ",
                                        {
                                           "Ref":"CfnKeys"
                                        },
                                        "    --secret-key ",
                                        {
                                           "Fn::GetAtt":[
                                              "CfnKeys",
                                              "SecretAccessKey"
                                           ]
                                        },
                                        "    --region     ",
                                        {
                                           "Ref":"AWS::Region"
                                        },
                                        "\n",
                                        "export NODE_NAME=solr\n",
                                        "mkdir /etc/chef\n",
                                        "curl -L https://s3.amazonaws.com/quickstart-reference/alfresco-one/latest/scripts/${NODE_NAME}.json > /etc/chef/attributes.json\n",
                                        "sed -i 's/@@ARTIFACT_REPO_USERNAME@@/",
                                        {
                                            "Ref": "ArtifactRepoUsername"
                                        },
                                        "/g' /etc/chef/attributes.json\n",
                                        "sed -i 's/@@ARTIFACT_REPO_PASSWORD@@/",
                                        {
                                            "Ref": "ArtifactRepoPassword"
                                        },
                                        "/g' /etc/chef/attributes.json\n",
                                        "sed -i 's/@@STACK_NAME@@/",
                                        {
                                            "Ref": "AWS::StackName"
                                        },
                                        "/g' /etc/chef/attributes.json\n",
                                        "sed -i 's/@@FQDN@@/",
                                        {
                                            "Fn::GetAtt": [
                                                "ElasticLoadBalancer",
                                                "DNSName"
                                            ]
                                        },
                                        "/g' /etc/chef/attributes.json\n",
                                        "sed -i 's/@@AWS_ACCESS_KEY@@/",
                                        {
                                            "Ref": "CfnKeys"
                                        },
                                        "/g' /etc/chef/attributes.json\n",
                                        "sed -i 's#@@AWS_SECRET_KEY@@#",
                                        {
                                            "Fn::GetAtt": [
                                                "CfnKeys",
                                                "SecretAccessKey"
                                            ]
                                        },
                                        "#g' /etc/chef/attributes.json\n",
                                        "sed -i 's/@@DB_HOST@@/",
                                        {
                                            "Fn::GetAtt": [
                                                "RDSDBInstance",
                                                "Endpoint.Address"
                                            ]
                                        },
                                        "/g' /etc/chef/attributes.json\n",
                                        "sed -i 's/@@DB_NAME@@/",
                                        {
                                            "Ref": "RDSDBName"
                                        },
                                        "/g' /etc/chef/attributes.json\n",
                                        "sed -i 's/@@DB_USERNAME@@/",
                                        {
                                            "Ref": "RDSUsername"
                                        },
                                        "/g' /etc/chef/attributes.json\n",
                                        "sed -i 's/@@DB_PASSWORD@@/",
                                        {
                                            "Ref": "RDSPassword"
                                        },
                                        "/g' /etc/chef/attributes.json\n",
                                        "sed -i 's/@@CONTENTSTORE_S3_BUCKET@@/",
                                        {
                                            "Ref": "S3BucketName"
                                        },
                                        "/g' /etc/chef/attributes.json\n",
                                        "sed -i 's/@@AWS_REGION@@/",
                                        {
                                            "Ref": "AWS::Region"
                                        },
                                        "/g' /etc/chef/attributes.json\n",
                                        "yum -y install coreutils glibc-common openssl\n",
                                        "ALFPASS=$(printf %s ",
                                        {
                                            "Ref": "AlfrescoPassword"
                                        },
                                        " | iconv -t utf16le | openssl md4| awk '{ print $2}')\n",
                                        "sed -i \"s/@@ALFRESCO_PASSWORD@@/$ALFPASS/g\" /etc/chef/attributes.json\n",
                                        "sed -i 's/@@AWS_SG_NAME@@/AlfrescoSecurityGroup/g' /etc/chef/attributes.json\n",
                                        "export CHEF_ALFRESCO_VERSION='0.6.22'\n",
                                        "curl -L https://s3.amazonaws.com/quickstart-reference/alfresco-one/latest/scripts/install-alfresco.sh --no-sessionid | bash -s\n",
                                        "export LOCALIP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4) \n",
                                        "export LOCALNAME=$(curl http://169.254.169.254/latest/meta-data/local-hostname)\n ",
                                        "export LOCALSHORTNAME=$(curl http://169.254.169.254/latest/meta-data/hostname|awk -F. '{print $1}')\n",
                                        "echo $LOCALIP $LOCALSHORTNAME $LOCALNAME >> /etc/hosts\n",
                                        "mkdir -p /usr/share/tomcat-alfresco/alflicense\n",
                                        "curl -L ",{ "Ref": "AlfrescoTrialLicense" }," -o /usr/share/tomcat-alfresco/alflicense/license.lic\n",
                                        "mkdir /root/.aws/\n",
                                        "echo [default] > /root/.aws/config\n",
                                        "echo region = ",
                                        {
                                            "Ref": "AWS::Region"
                                        },
                                        " >> /root/.aws/config\n",
                                        "mysql -u ", { "Ref": "RDSUsername" }, " -p", { "Ref": "RDSPassword" }, " -h ", { "Fn::GetAtt": [ "RDSDBInstance", "Endpoint.Address" ] }," -e \"desc ", { "Ref": "RDSDBName" }, ".alf_server\" > /dev/null 2>&1\n",
                                        "if [ $? == 1 ]; then sleep 600; fi\n",
                                        "yum -y install wget libreoffice-headless.x86_64\n",
                                        "cd /etc/chef; chef-client -z -j /etc/chef/attributes.json\n",
                                        "export ALFSUBNET1=", { "Ref":"AlfrescoSubnet1" }, "\n",
                                        "export ALFSUBNET2=", { "Ref":"AlfrescoSubnet2" }, "\n",
                                        "export AUTOSCALING_GROUP_NAME=$(aws autoscaling describe-auto-scaling-groups | grep AutoScalingGroupName|grep IndexAutoScalingGroup|awk -F\\\" '{ print $4 }' )\n",
                                        "aws autoscaling update-auto-scaling-group --auto-scaling-group-name $AUTOSCALING_GROUP_NAME --min-size 2 --max-size 4 --desired-capacity 2 --vpc-zone-identifier $ALFSUBNET1,$ALFSUBNET2\n"
                                    ]
                                ]
                            }
                          }
                        }
                    },
        "IndexScaleUpPolicy":{
                   "Type":"AWS::AutoScaling::ScalingPolicy",
                   "Properties":{
                      "AdjustmentType":"ChangeInCapacity",
                      "AutoScalingGroupName":{
                         "Ref":"AlfrescoAutoScalingGroup"
                      },
                      "Cooldown":"900",
                      "ScalingAdjustment":"1"
                   }
                },
        "IndexScaleDownPolicy":{
                   "Type":"AWS::AutoScaling::ScalingPolicy",
                   "Properties":{
                      "AdjustmentType":"ChangeInCapacity",
                      "AutoScalingGroupName":{
                         "Ref":"AlfrescoAutoScalingGroup"
                      },
                      "Cooldown":"900",
                      "ScalingAdjustment":"-1"
                   }
                },
        "IndexCPUAlarmHigh":{
                   "Type":"AWS::CloudWatch::Alarm",
                   "Properties":{
                      "AlarmDescription":"Scale-up if CPU > 60% for 5 minutes",
                      "MetricName":"CPUUtilization",
                      "Namespace":"AWS/EC2",
                      "Statistic":"Average",
                      "Period":"60",
                      "EvaluationPeriods":"5",
                      "Threshold":"60",
                      "AlarmActions":[
                         {
                            "Ref":"IndexScaleUpPolicy"
                         }
                      ],
                      "Dimensions":[
                         {
                            "Name":"AutoScalingGroupName",
                            "Value":{
                               "Ref":"IndexAutoScalingGroup"
                            }
                         }
                      ],
                      "ComparisonOperator":"GreaterThanThreshold"
                   }
                },
        "IndexCPUAlarmLow":{
                   "Type":"AWS::CloudWatch::Alarm",
                   "Properties":{
                      "AlarmDescription":"Scale-down if CPU < 40% for 30 minutes",
                      "MetricName":"CPUUtilization",
                      "Namespace":"AWS/EC2",
                      "Statistic":"Average",
                      "Period":"60",
                      "EvaluationPeriods":"30",
                      "Threshold":"40",
                      "AlarmActions":[
                         {
                            "Ref":"IndexScaleDownPolicy"
                         }
                      ],
                      "Dimensions":[
                         {
                            "Name":"AutoScalingGroupName",
                            "Value":{
                               "Ref":"IndexAutoScalingGroup"
                            }
                         }
                      ],
                      "ComparisonOperator":"LessThanThreshold"
                   }
                },
        "IndexAutoScalingGroup":{
                   "Type":"AWS::AutoScaling::AutoScalingGroup",
                   "Properties":{
                      "AvailabilityZones": [ { "Ref":"AZ2", "Ref":"AZ1" } ],
                      "VPCZoneIdentifier": [ { "Ref":"AlfrescoSubnet2", "Ref":"AlfrescoSubnet1" } ],
                      "Cooldown":"600",
                      "DesiredCapacity":"1",
                      "HealthCheckGracePeriod":"900",
                      "HealthCheckType":"EC2",
                      "LaunchConfigurationName":{
                         "Ref":"IndexASLaunchConfig"
                      },
                      "MaxSize":"4",
                      "MinSize":"1",
                      "NotificationConfiguration":{
                         "TopicARN":{
                            "Ref":"NotificationTopic"
                         },
                         "NotificationTypes":[
                            "autoscaling:EC2_INSTANCE_LAUNCH",
                            "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                            "autoscaling:EC2_INSTANCE_TERMINATE",
                            "autoscaling:EC2_INSTANCE_TERMINATE_ERROR",
                            "autoscaling:TEST_NOTIFICATION"
                         ]
                      },
                      "Tags":[
                         {
                            "Key":"Name",
                            "Value":"Alfresco Index Server node",
                            "PropagateAtLaunch":"true"
                         },
                         {
                            "Key":"haproxy-role",
                            "Value":"solr",
                            "PropagateAtLaunch":"true"
                         }
                      ]
                   }
                },
        "RDSSubnet1": {
          "Type": "AWS::EC2::Subnet",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
            },
              "CidrBlock": {
                "Fn::FindInMap": [
                    "SubnetConfig",
                    "RDS1",
                    "CIDR"
                ]
            },
              "Tags": [
                {
                    "Key": "Application",
                    "Value": "RDS"
                },
                {
                    "Key": "Network",
                    "Value": "Private"
                }
            ],
              "AvailabilityZone": {
                "Ref": "AZ1"
            }
          }
        },
        "RDSSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "RDS2",
                        "CIDR"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": "RDS"
                    },
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ],
                "AvailabilityZone": {
                    "Ref": "AZ2"
                }
            }
        },
        "S3Bucket":{
            "Type" : "AWS::S3::Bucket",
            "DeletionPolicy" : "Delete",
            "Properties": {
              "BucketName": {"Ref":"S3BucketName"},
              "AccessControl": "BucketOwnerFullControl"
            }
        },
        "AlfrescoSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow access to the Alfresco One instances",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                  {
                      "IpProtocol": "tcp",
                      "FromPort": "80",
                      "ToPort": "80",
                      "SourceSecurityGroupId": {
                          "Ref": "ELBSecurityGroup"
                      }
                  },
                  {
                      "IpProtocol": "tcp",
                      "FromPort": "443",
                      "ToPort": "443",
                      "SourceSecurityGroupId": {
                          "Ref": "ELBSecurityGroup"
                      }
                  },
                  {
                        "IpProtocol": "tcp",
                        "FromPort": "5701",
                        "ToPort": "5701",
                        "CidrIp": {
                            "Fn::FindInMap": [
                                "SubnetConfig",
                                "Alfresco1",
                                "CIDR"
                            ]
                        }
                  },
                  {
                        "IpProtocol": "tcp",
                        "FromPort": "5701",
                        "ToPort": "5701",
                        "CidrIp": {
                            "Fn::FindInMap": [
                                "SubnetConfig",
                                "Alfresco2",
                                "CIDR"
                            ]
                        }
                  },
                  {
                        "IpProtocol": "tcp",
                        "FromPort": "8090",
                        "ToPort": "8090",
                        "CidrIp": {
                            "Fn::FindInMap": [
                                "SubnetConfig",
                                "Alfresco1",
                                "CIDR"
                            ]
                        }
                  },
                  {
                        "IpProtocol": "tcp",
                        "FromPort": "8090",
                        "ToPort": "8090",
                        "CidrIp": {
                            "Fn::FindInMap": [
                                "SubnetConfig",
                                "Alfresco2",
                                "CIDR"
                            ]
                        }
                  },
                  {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Fn::GetAtt": [
                                            "NATInstance2",
                                            "PrivateIp"
                                        ]
                                    },
                                    "/32"
                                ]
                            ]
                        }
                  },
                  {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Fn::GetAtt": [
                                            "NATInstance1",
                                            "PrivateIp"
                                        ]
                                    },
                                    "/32"
                                ]
                            ]
                        }
                  }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "0",
                        "ToPort": "65535",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        }
  },
    "Outputs": {
      "AlfrescoServerOutput": {
        "Description": "Please, wait for 15 minutes or more to let Alfresco and Index server to finish the installation and scaling process. Then go to the URL below to the ELB serving the Alfresco Share login page:",
          "Value": {
            "Fn::Join": [
                "",
                [ "http://", { "Fn::GetAtt": [ "ElasticLoadBalancer", "DNSName" ] }, "/share" ]
            ]
        }
      },
      "AlfrescoAwsReadMoreInfo": {
        "Description": "For more information and details visit:",
          "Value": {
            "Fn::Join": [
              "",
              [ "https://github.com/Alfresco/alfresco-cloudformation-chef" ]
          ]
      }
    }
  }
}
